/*
Напишите функцию с именем convert, которая конвертирует входное число типа int64 в uint16.
Считывать и выводить ничего не нужно!
Считайте что функция main и пакет main уже объявлены!
*/
package main

import (
	"strconv"
	"unicode"
)

// 3.2.1
func convert(a int64) uint16 {
	return uint16(a)
}

/*
Представьте что вы работаете в большой компании где используется модульная архитектура.
Ваш коллега написал модуль с какой-то логикой (вы не знаете) и передает в вашу программу какие-то данные.
Вы же пишете функцию которая считывает две переменных типа string ,  а возвращает число типа int64
которое нужно получить сложением этих строк.
Но не было бы так все просто, ведь ваш коллега не пишет на Go, и он зол из-за того, что гоферам платят больше.
Поэтому он решил подшутить над вами и подсунул вам свинью. Он придумал вставлять мусор в строки перед тем как вызывать вашу функцию.
Поэтому предварительно вам нужно убрать из них мусор и конвертировать в числа. Под мусором имеются ввиду лишние символы и спец знаки.
Разрешается использовать только определенные пакеты: fmt, strconv, unicode, strings,  bytes. Они уже импортированы, вам ничего импортировать не нужно!

Считывать и выводить ничего не нужно!
Ваша функция должна называться adding() !
Считайте что функция и пакет main уже объявлены!

Sample Input:
%^80 hhhhh20&&&&nd
Sample Output:
100
*/
//3.2.2
func adding(x string, y string) int64 {

	var xrune []rune
	var yrune []rune
	var num1 = ""
	var num2 = ""

	for _, p := range x {
		xrune = append(xrune, p)
	}

	for _, p := range xrune {
		if unicode.IsDigit(p) {
			num1 = num1 + string(p)
		}
	}
	res1, err1 := strconv.Atoi(num1)
	if err1 != nil {
		panic(err1)
	}

	for _, p := range y {
		yrune = append(yrune, p)
	}

	for _, p := range yrune {
		if unicode.IsDigit(p) {
			num2 = num2 + string(p)
		}
	}
	res2, err2 := strconv.Atoi(num2)
	if err2 != nil {
		panic(err2)
	}

	res := int64(res1 + res2)

	return res
}
